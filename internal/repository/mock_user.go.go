// Code generated by MockGen. DO NOT EDIT.
// Source: user.go
//
// Generated by this command:
//
//	mockgen -package=repository -destination=mock_user.go.go -source=user.go
//

// Package repository is a generated GoMock package.
package repository

import (
	reflect "reflect"

	db "github.com/kaitokid2302/Workout-Tracker/internal/db"
	gomock "go.uber.org/mock/gomock"
)

// MockUserService is a mock of UserService interface.
type MockUserService struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceMockRecorder
}

// MockUserServiceMockRecorder is the mock recorder for MockUserService.
type MockUserServiceMockRecorder struct {
	mock *MockUserService
}

// NewMockUserService creates a new mock instance.
func NewMockUserService(ctrl *gomock.Controller) *MockUserService {
	mock := &MockUserService{ctrl: ctrl}
	mock.recorder = &MockUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserService) EXPECT() *MockUserServiceMockRecorder {
	return m.recorder
}

// AddUser mocks base method.
func (m *MockUserService) AddUser(user *db.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUser", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUser indicates an expected call of AddUser.
func (mr *MockUserServiceMockRecorder) AddUser(user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUser", reflect.TypeOf((*MockUserService)(nil).AddUser), user)
}

// FindUser mocks base method.
func (m *MockUserService) FindUser(username string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUser", username)
	ret0, _ := ret[0].(error)
	return ret0
}

// FindUser indicates an expected call of FindUser.
func (mr *MockUserServiceMockRecorder) FindUser(username any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUser", reflect.TypeOf((*MockUserService)(nil).FindUser), username)
}
